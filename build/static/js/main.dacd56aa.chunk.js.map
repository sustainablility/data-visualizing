{"version":3,"sources":["communicateToServer/loadData.js","lib/getRequestParameters.js","component/table/tableTd.js","component/table/tableTr.js","component/table/tableTh.js","component/table/tableHead.js","component/table/table.js","App.js","serviceWorker.js","index.js"],"names":["url","a","axios","get","result","data","loadDataFromServer","GetRequestParams","window","location","search","theRequest","indexOf","strs","substr","split","i","length","unescape","TableTd","this","props","value","React","Component","TableTr","renderList","tableValues","values","tag","push","JSON","stringify","TableTh","TableHead","tableTitle","DisplayTable","Object","keys","row","App","state","loaded","loadData","undefined","params","setState","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4XACA,WAAkCA,GAAlC,eAAAC,EAAA,sEACuBC,IAAMC,IAAIH,GADjC,cACQI,EADR,yBAEWA,EAAOC,MAFlB,4C,sBAIeC,M,4CCQAC,MAbf,WACI,IAAIP,EAAMQ,OAAOC,SAASC,OACtBC,EAAa,GACjB,IAA0B,IAAtBX,EAAIY,QAAQ,KAGZ,IAFA,IACIC,EADMb,EAAIc,OAAO,GACNC,MAAM,KACbC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC5BL,EAAWE,EAAKG,GAAGD,MAAM,KAAK,IAAIG,SAASL,EAAKG,GAAGD,MAAM,KAAK,IAGtE,OAAOJ,GCHIQ,E,iLAHP,OAAO,4BAAKC,KAAKC,MAAMC,W,GAFTC,IAAMC,WCiBbC,E,iLAdP,IAAIC,EAAa,GACbC,EAAcP,KAAKC,MAAMO,OAC7B,IAAK,IAAIC,KAAOF,EACoB,kBAArBA,EAAYE,GACnBH,EAAWI,KAAK,kBAAC,EAAD,CAASR,MAAOK,EAAYE,MAChB,OAArBF,EAAYE,GACnBH,EAAWI,KAAK,kBAAC,EAAD,CAASR,MAAO,MAEhCI,EAAWI,KAAK,kBAAC,EAAD,CAASR,MAAOS,KAAKC,UAAUL,EAAYE,OAGnE,OAAO,4BAAKH,O,GAbEH,IAAMC,WCIbS,E,iLAHP,OAAO,4BAAKb,KAAKC,MAAMC,W,GAFTC,IAAMC,WCUbU,E,iLAPP,IAAIR,EAAa,GADZ,uBAEL,YAAuBN,KAAKC,MAAMO,OAAlC,+CAA0C,CAAC,IAAlCO,EAAiC,QACtCT,EAAWI,KAAK,kBAAC,EAAD,CAASR,MAAOa,MAH/B,kFAKL,OAAO,4BAAKT,O,GANIH,IAAMC,WCWfY,E,iLATP,IAAIV,EAAa,GACjBA,EAAWI,KAAK,kBAAC,EAAD,CAAWF,OAAQS,OAAOC,KAAKlB,KAAKC,MAAMhB,KAAK,OAF1D,2BAGL,YAAgBe,KAAKC,MAAMhB,KAA3B,+CAAiC,CAAC,IAAzBkC,EAAwB,QAC7Bb,EAAWI,KAAK,kBAAC,EAAD,CAASF,OAAQW,MAJhC,kFAML,OAAQ,+BAAQb,O,GAPGH,IAAMC,WC0ClBgB,E,2MArCbC,MAAQ,CACNC,QAAQ,EACRrC,KAAM,M,mFAIN,IAAKe,KAAKqB,MAAMC,OAEd,OADAtB,KAAKuB,WACE,O,2JAOUC,KADfC,EAAStC,KACFP,I,yCACF,M,uBAEQM,EAAmBuC,EAAO7C,K,OAAvCK,E,OACJe,KAAK0B,SAAS,CACZJ,QAAQ,EACRrC,KAAMA,I,qIAKR,OAAKe,KAAKqB,MAAMC,OAMZ,kBAAC,EAAD,CAAcrC,KAAMe,KAAKqB,MAAMpC,OAJ7B,4C,GA7BQkB,IAAMC,WCKJuB,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dacd56aa.chunk.js","sourcesContent":["import axios from 'axios';\nasync function loadDataFromServer(url) {\n    let result = await axios.get(url);\n    return result.data;\n}\nexport default loadDataFromServer;","function GetRequestParams() {\n    let url = window.location.search;\n    let theRequest = {};\n    if (url.indexOf(\"?\") !== -1) {\n        let str = url.substr(1);\n        let strs = str.split(\"&\");\n        for(let i = 0; i < strs.length; i ++) {\n            theRequest[strs[i].split(\"=\")[0]]=unescape(strs[i].split(\"=\")[1]);\n        }\n    }\n    return theRequest;\n}\n\nexport default GetRequestParams;","import React from 'react';\n\nclass TableTd extends React.Component{\n    render() {\n        return(<td>{this.props.value}</td>)\n    }\n}\nexport default TableTd;","import React from 'react';\nimport TableTd from \"./tableTd\";\n\nclass TableTr extends React.Component{\n    render() {\n        let renderList = [];\n        let tableValues = this.props.values;\n        for (let tag in tableValues) {\n            if (typeof tableValues[tag] === \"string\") {\n                renderList.push(<TableTd value={tableValues[tag]}/>);\n            } else if (tableValues[tag] === null){\n                renderList.push(<TableTd value={\"\"}/>);\n            } else {\n                renderList.push(<TableTd value={JSON.stringify(tableValues[tag])}/>);\n            }\n        }\n        return(<tr>{renderList}</tr>)\n    }\n}\nexport default TableTr;","import React from 'react';\n\nclass TableTh extends React.Component{\n    render() {\n        return(<th>{this.props.value}</th>)\n    }\n}\nexport default TableTh;","import React from 'react';\nimport TableTh from \"./tableTh\";\n\nclass TableHead extends React.Component{\n    render() {\n        let renderList = [];\n        for (let tableTitle of this.props.values) {\n            renderList.push(<TableTh value={tableTitle}/>)\n        }\n        return(<tr>{renderList}</tr>)\n    }\n}\nexport default TableHead;","import React from 'react';\nimport TableTr from \"./tableTr\";\nimport TableHead from \"./tableHead\";\nclass DisplayTable extends React.Component {\n    render() {\n        let renderList = [];\n        renderList.push(<TableHead values={Object.keys(this.props.data[0])}/>);\n        for (let row of this.props.data) {\n            renderList.push(<TableTr values={row}/>)\n        }\n        return (<table>{renderList}</table>)\n    }\n}\n\nexport default DisplayTable;","import React from 'react';\nimport './generalStyle.scss'\nimport loadDataFromServer from \"./communicateToServer/loadData\";\nimport GetRequestParams from \"./lib/getRequestParameters\";\nimport DisplayTable from \"./component/table/table\";\n\n\nclass App extends React.Component{\n  state = {\n    loaded: false,\n    data: null\n  };\n\n  componentDidMount() {\n    if (!this.state.loaded) {\n      this.loadData();\n      return null;\n    }\n\n  }\n\n  async loadData() {\n    let params = GetRequestParams();\n    if (params.url === undefined) {\n      return null;\n    }\n    let data = await loadDataFromServer(params.url);\n    this.setState({\n      loaded: true,\n      data: data\n    });\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return (\n          <div>Loading</div>\n      );\n    }\n    return (\n        <DisplayTable data={this.state.data}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}